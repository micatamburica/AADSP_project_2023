1     						
2     	 0000				_GAINPROC_ASM
3     						
4     						.if defined (_GAINPROC_ASM)
5     					.include "example_module_mcv.h"
5      >> open include file: C:/Users/Lenovo/Desktop/project/Final/example_module/gen/inc/example_module_mcv.h
1+    						/*
2+    						 * This file is automatically generated by CLIDE
3+    						 *
4+    						 * MCV (Module Control Vector)
5+    						 */
6+    						.include "dsplib/meter_asm.h" 
6+     >> open include file: C:/CirrusDSP/include/dsplib/meter_asm.h
1+    							.if !defined(_meter_h_)
2+    	 0000				_meter_h_
3+    						
4+    						METER_T .struct
5+    						RMS .dw 0			#fract(1.31)
6+    						RMS_HOLD .dw 0		#fract(1.31)
7+    						PEAK .dw 0			#fract(1.31)
8+    						PEAK_HOLD .dw 0		#fract(1.31)
9+    							.endstruct
10+   						
11+   						(null)11+    >> end of include file: C:/CirrusDSP/include/dsplib/meter_asm.h
11+    >> continuing with file: C:/Users/Lenovo/Desktop/project/Final/example_module/gen/inc/example_module_mcv.h
7+    						.include "dsplib/response_asm.h"
7+     >> open include file: C:/CirrusDSP/include/dsplib/response_asm.h
1+    							.if !defined(_response_h_)
2+    	 0000				_response_h_
3+    						
4+    						BIQUAD_T .struct
5+    						COEF_A1 .dw 0			#fract(2.30)
6+    						COEF_A2 .dw 0			#fract(2.30)
7+    						COEF_B0 .dw 1			#fract(3.29)
8+    						COEF_B1 .dw 0			#fract(3.29)
9+    						COEF_B2 .dw 0			#fract(3.29)
10+   							.endstruct
11+   						
12+   						RESPONSE_T .struct
13+   						PRE .dw 0			#fract(7.25)
14+   						POST .dw 0			#fract(7.25)
15+   							.rept %i = 0,2
16+   						BIQUAD_%i BIQUAD_T		#struct
17+    >> start of macro: .rept
1+    						BIQUAD_0 BIQUAD_T		#struct
2+    						BIQUAD_1 BIQUAD_T		#struct
3+    						BIQUAD_2 BIQUAD_T		#struct
4+    						
17+   							.endm
18+   							.endstruct
19+   							
20+   							.endif21+   						(null)21+    >> end of include file: C:/CirrusDSP/include/dsplib/response_asm.h
21+    >> continuing with file: C:/Users/Lenovo/Desktop/project/Final/example_module/gen/inc/example_module_mcv.h
8+    						
9+    	 0001				isDefined	 .equ 	 1
10+   						
11+   						MCV_T	.struct
12+   						Enable .dw 0	 # bool	non-zero to enable this function
13+   						InputGain .dw 0	 #fract(1.31)
14+   						HeadroomGain .dw 0	 #fract(1.31)
15+   						OutputMode .dw 0	 #int
16+   							.endstruct
17+   						
18+   						
19+   	 0000				STRUCTURE_INITIALIZATION_STRNG .equ "0x1, 0x00000000, 0x00000000, 0x00000000"
20+    >> end of include file: C:/Users/Lenovo/Desktop/project/Final/example_module/gen/inc/example_module_mcv.h
20+    >> continuing with file: C:/Users/Lenovo/Desktop/project/Final/example_module/src/GainProcessing.a
6     						
7     						// Block size 
8     	 0010				_BLOCK_SIZE .equ 16
9     						
10    						// Channel IDs. 
11    	 0000				_LEFT_CH .equ 0
12    	 0001				_RIGHT_CH .equ 1
13    	 0002				_CENTER_CH .equ 2
14    	 0003				_LEFT_S_CH .equ 3
15    	 0004				_RIGHT_S_CH .equ 4
16    						
17    	 0000				_degree .equ 2.0
18    						
19    	 0000					.public _gainProcessing
20    							
21    	 0000					.extern _GlobalInputGain
22    	 0000					.extern _GlobalHeadroomGain
23    	 0000					.extern _GlobalLimiterThreshold
24    	 0000					.extern _Minus_6DB
25    	 0000					.extern _Minus_2DB
26    	 0000					.extern _ASMDegree
27    	 0000					.extern _ASMGain
28    							
29    	 0000					.extern example_module_MCV (MCV_T)
30    							
31    						 	.code_ovly 
31     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
32    						 	
33    	 0000				_gainProcessing:
34    						
35    																	#i0 is a pointer to inL
36    																	#i1 is a pointer to OutL
37    	 0000	 84050010		i4 = i0 + (_RIGHT_CH * _BLOCK_SIZE)		#i4 is a pointer to inR
38    	 0001	 85150010		i5 = i1 + (_RIGHT_CH * _BLOCK_SIZE)		#i5 is a pointer to OutR
39    	 0002	 86150020		i6 = i1 + (_CENTER_CH * _BLOCK_SIZE)	#i6 is a pointer to OutC
40    	 0003	 82150030		i2 = i1 + (_LEFT_S_CH * _BLOCK_SIZE)	#i2 is a pointer to OutLs
41    	 0004	 83150040		i3 = i1 + (_RIGHT_S_CH * _BLOCK_SIZE)   #i3 is a pointer to OutRs
42    							
43    	 0005	 83040000		x3 = xmem[example_module_MCV.InputGain]				#get the GlobalInputGain
44    	 0006	 87040000		y3 = xmem[example_module_MCV.HeadroomGain]			#get the GlobalHeadroomGain
45    						 
46    	 0007	 8100003C		do(_BLOCK_SIZE) ,>loop
47    							
48    							#1. INPUTGAIN FOR L AND R
49    	 0008	 80940010	 	x0 = ymem[i0]; i0 += 1					#get the inL and inR values
50    	 0009	 81940014	 	x1 = ymem[i4]; i4 += 1
51    						 	
52    	 000A	 00002180	 	a0 = x0 * x3		
53    	 000B	 000021A1	 	a1 = x1 * x3
54    						 	
55    						 	#4. INVERTER FOR Ls AND Rs
56    							
57    	 000C	 8088003E		call functionInverter
58    						 	
59    						 	#2. ADD L AND R TO C
60    	 000D	 00004408	 	a0 = a0 + a1
61    						 	
62    	 000E	 8C040000	 	b0 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold
63    	 000F	 00004860	 	if(b0 < a0) a0 = b0						#saturation
64    	 0010	 00004C84	 	b0 = -b0
65    	 0011	 00004820	 	if(b0 > a0) a0 = b0 
66    						
67    							#3. HEADROOMGAIN FOR C 
68    	 0012	 48407FFF		x0 = a0
69    	 0013	 00002464		b0 = x0 * y3
70    							
71    	 0014	 8CD40006		ymem[i6] = b0							#(END FOR C)
72    							
73    							#5. -6DB FOR L AND R 
74    	 0015	 4C407FFF		x0 = b0 
75    	 0016	 84040000		y0 = xmem[_Minus_6DB]					#get the -6DB
76    							
77    	 0017	 00002404		b0 = x0 * y0
78    							
79    	 0018	 8CD40001	 	ymem[i1] = b0							#(END FOR L)
80    	 0019	 8CD40005	 	ymem[i5] = b0							#(END FOR R)
81    						 	
82    						 	#6. -2DB FOR Ls AND Rs
83    						 	
84    	 001A	 80940002	 	x0 = ymem[i2]
85    	 001B	 81940003	 	x1 = ymem[i3]
86    	 001C	 84040000	 	y0 = xmem[_Minus_2DB]					#get the -2DB
87    						 	
88    	 001D	 00002400	 	a0 = x0 * y0
89    	 001E	 00002481	 	a1 = x1 * y0
90    						 	
91    						 	#7. ADD L AND R TO Ls AND Rs
92    						 	
93    	 001F	 00004420	 	a0 = a0 + b0
94    	 0020	 000044A1	 	a1 = a1 + b0
95    						 	
96    	 0021	 8C040000	 	b0 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold
97    	 0022	 00004860	 	if(b0 < a0) a0 = b0						#saturation
98    	 0023	 00004C84	 	b0 = -b0
99    	 0024	 00004820	 	if(b0 > a0) a0 = b0
100   						 	
101   	 0025	 88D40002	 	ymem[i2] = a0							#(END FOR Ls)
102   						 	
103   	 0026	 8D040000	 	b1 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold 
104   	 0027	 00004869	 	if(b1 < a1) a1 = b1						#saturation
105   	 0028	 00004C8D	 	b1 = -b1
106   	 0029	 00004829	 	if(b1 > a1) a1 = b1
107   						 	
108   	 002A	 89D40003	 	ymem[i3] = a1							#(END FOR Rs)
109   						 	
110   	 002B	 00004DC6	 	b2 = 0
111   	 002C	 8C040000	 	b0 = xmem[example_module_MCV.OutputMode]		#check to see mode
112   	 002D	 00004E84		b0&b0 
113   	 002E	 86480032		if (b != 0) jmp>NotMode2_0_0
114   	 002F	 8ED40006			ymem[i6] = b2
115   	 0030	 8ED40002			ymem[i2] = b2
116   	 0031	 8ED40003	 		ymem[i3] = b2	
117   						
118   	 0032				%NotMode2_0_0:
119   						
120   	 0032	 8D4A0002		uhalfword(b1) = (2)
121   	 0033	 0000444C		b0 = b0 - b1
122   	 0034	 86480038		if (b != 0) jmp>NotMode0_2_0
123   	 0035	 8ED40001			ymem[i1] = b2
124   	 0036	 8ED40005			ymem[i5] = b2
125   	 0037	 8ED40006			ymem[i6] = b2
126   						 
127   	 0038				%NotMode0_2_0:	
128   						
129   	 0038	 02097FFF	 	i1 += 1
130   	 0039	 020A7FFF	 	i2 += 1
131   	 003A	 020B7FFF	 	i3 += 1
132   	 003B	 020E7FFF	 	i6 += 1	
133   						 	
134   	 003C	 020D7FFF	%loop: i5 += 1
135   						 
136   	 003D	 81880000		ret
137   							
138   	 003E				functionInverter:
139   						
140   	 003E	 48447FFF		y0 = a0   								#inL is in a0
141   	 003F	 49457FFF		y1 = a1 								#inR is in a1
142   							
143   	 0040	 80040000		x0 = xmem[_ASMDegree]
144   	 0041	 81040000		x1 = xmem[_ASMGain]
145   	 0042	 404B7FFF		a3 = x0									
146   						
147   	 0043	 9A7A8000		a2h = (0x8000)							#get dry
148   	 0044	 0000455A		a2 = a2 - a3
149   	 0045	 4A467FFF		y2 = a2
150   							
151   	 0046	 00002705		b1 = y0 * y2							#VALUE OF L
152   	 0047	 0000241D		b1 -= y0 * x0
153   	 0048	 4D427FFF		x2 = b1
154   							
155   	 0049	 000020C7		b3 = x2 * x1
156   							
157   	 004A	 8B040000		a3 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold
158   							
159   	 004B	 0000487F	 	if(a3 < b3) b3 = a3						#saturation
160   	 004C	 00004C9B	 	a3 = -a3
161   	 004D	 0000483F	 	if(a3 > b3) b3 = a3		
162   						
163   	 004E	 8FD40002		ymem[i2] = b3	
164   							
165   	 004F	 00002725		b1 = y1 * y2							#VALUE OF R
166   	 0050	 0000243D		b1 -= y1 * x0
167   	 0051	 4D427FFF		x2 = b1
168   							
169   	 0052	 000020C7		b3 = x2 * x1
170   							
171   	 0053	 0000483F		if(a3 > b3) b3 = a3						#saturation
172   	 0054	 00004C9B	 	a3 = -a3
173   	 0055	 0000487F	 	if(a3 < b3) b3 = a3	
174   						
175   	 0056	 8FD40003		ymem[i3] = b3
176   						
177   	 0057	 81880000		ret
178   						 
179   						 	.endif
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

STRUCTURE_INITIALIZATION_STRNG                                                  			  Unused String		   '0x1, 0x00000000, 0x00000000, 0x00000000' 
_ASMDegree                                                                      					 External   
_ASMGain                                                                        					 External   
_BLOCK_SIZE                                                                     					 Number				          16 (10H)
_CENTER_CH                                                                      					 Number				          2 (2H)
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           			  Unused Variable		        0 (0H)
_GAINPROC_ASM                                                                   			  Unused Relocatable        __INIT:0000H
_GlobalHeadroomGain                                                             					 External   
_GlobalInputGain                                                                					 External   
_GlobalLimiterThreshold                                                         					 External   
_LEFT_CH                                                                        			  Unused Number				     0 (0H)
_LEFT_S_CH                                                                      					 Number				          3 (3H)
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_Minus_2DB                                                                      					 External   
_Minus_6DB                                                                      					 External   
_RIGHT_CH                                                                       					 Number				          1 (1H)
_RIGHT_S_CH                                                                     					 Number				          4 (4H)
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
_degree                                                                         			  Unused Float		          2 
_gainProcessing                                                                 			  Public Relocatable       GainProcessing_GEN_0000:0000H
_meter_h_                                                                       			  Unused Relocatable        __INIT:0000H
_response_h_                                                                    			  Unused Relocatable        __INIT:0000H
example_module_MCV                                                              					 External   
functionInverter                                                                			         Relocatable         GainProcessing_GEN_0000:003EH
isDefined                                                                       			  Unused Number				      1 (1H)

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0058H	 GainProcessing_GEN_0000                 			 CODE_OVLY                               


_GAINPROC_ASM

.if defined (_GAINPROC_ASM)
.include "example_module_mcv.h"

// Block size 
_BLOCK_SIZE .equ 16

// Channel IDs. 
_LEFT_CH .equ 0
_RIGHT_CH .equ 1
_CENTER_CH .equ 2
_LEFT_S_CH .equ 3
_RIGHT_S_CH .equ 4

_degree .equ 2.0

	.public _gainProcessing
	
	.extern _GlobalInputGain
	.extern _GlobalHeadroomGain
	.extern _GlobalLimiterThreshold
	.extern _Minus_6DB
	.extern _Minus_2DB
	.extern _ASMDegree
	.extern _ASMGain
	
	.extern example_module_MCV (MCV_T)
	
 	.code_ovly 
 	
_gainProcessing:

											#i0 is a pointer to inL
											#i1 is a pointer to OutL
	i4 = i0 + (_RIGHT_CH * _BLOCK_SIZE)		#i4 is a pointer to inR
	i5 = i1 + (_RIGHT_CH * _BLOCK_SIZE)		#i5 is a pointer to OutR
	i6 = i1 + (_CENTER_CH * _BLOCK_SIZE)	#i6 is a pointer to OutC
	i2 = i1 + (_LEFT_S_CH * _BLOCK_SIZE)	#i2 is a pointer to OutLs
	i3 = i1 + (_RIGHT_S_CH * _BLOCK_SIZE)   #i3 is a pointer to OutRs
	
	x3 = xmem[example_module_MCV.InputGain]				#get the GlobalInputGain
	y3 = xmem[example_module_MCV.HeadroomGain]			#get the GlobalHeadroomGain
 
	do(_BLOCK_SIZE) ,>loop
	
	#1. INPUTGAIN FOR L AND R
 	x0 = ymem[i0]; i0 += 1					#get the inL and inR values
 	x1 = ymem[i4]; i4 += 1
 	
 	a0 = x0 * x3		
 	a1 = x1 * x3
 	
 	#4. INVERTER FOR Ls AND Rs
	
	call functionInverter
 	
 	#2. ADD L AND R TO C
 	a0 = a0 + a1
 	
 	b0 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold
 	if(b0 < a0) a0 = b0						#saturation
 	b0 = -b0
 	if(b0 > a0) a0 = b0 

	#3. HEADROOMGAIN FOR C 
	x0 = a0
	b0 = x0 * y3
	
	ymem[i6] = b0							#(END FOR C)
	
	#5. -6DB FOR L AND R 
	x0 = b0 
	y0 = xmem[_Minus_6DB]					#get the -6DB
	
	b0 = x0 * y0
	
 	ymem[i1] = b0							#(END FOR L)
 	ymem[i5] = b0							#(END FOR R)
 	
 	#6. -2DB FOR Ls AND Rs
 	
 	x0 = ymem[i2]
 	x1 = ymem[i3]
 	y0 = xmem[_Minus_2DB]					#get the -2DB
 	
 	a0 = x0 * y0
 	a1 = x1 * y0
 	
 	#7. ADD L AND R TO Ls AND Rs
 	
 	a0 = a0 + b0
 	a1 = a1 + b0
 	
 	b0 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold
 	if(b0 < a0) a0 = b0						#saturation
 	b0 = -b0
 	if(b0 > a0) a0 = b0
 	
 	ymem[i2] = a0							#(END FOR Ls)
 	
 	b1 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold 
 	if(b1 < a1) a1 = b1						#saturation
 	b1 = -b1
 	if(b1 > a1) a1 = b1
 	
 	ymem[i3] = a1							#(END FOR Rs)
 	
 	b2 = 0
 	b0 = xmem[example_module_MCV.OutputMode]		#check to see mode
	b0&b0 
	if (b != 0) jmp>NotMode2_0_0
		ymem[i6] = b2
		ymem[i2] = b2
 		ymem[i3] = b2	

%NotMode2_0_0:

	uhalfword(b1) = (2)
	b0 = b0 - b1
	if (b != 0) jmp>NotMode0_2_0
		ymem[i1] = b2
		ymem[i5] = b2
		ymem[i6] = b2
 
%NotMode0_2_0:	

 	i1 += 1
 	i2 += 1
 	i3 += 1
 	i6 += 1	
 	
%loop: i5 += 1
 
	ret
	
functionInverter:

	y0 = a0   								#inL is in a0
	y1 = a1 								#inR is in a1
	
	x0 = xmem[_ASMDegree]
	x1 = xmem[_ASMGain]
	a3 = x0									

	a2h = (0x8000)							#get dry
	a2 = a2 - a3
	y2 = a2
	
	b1 = y0 * y2							#VALUE OF L
	b1 -= y0 * x0
	x2 = b1
	
	b3 = x2 * x1
	
	a3 = xmem[_GlobalLimiterThreshold]		#get the GlobalLimiterThreshold
	
 	if(a3 < b3) b3 = a3						#saturation
 	a3 = -a3
 	if(a3 > b3) b3 = a3		

	ymem[i2] = b3	
	
	b1 = y1 * y2							#VALUE OF R
	b1 -= y1 * x0
	x2 = b1
	
	b3 = x2 * x1
	
	if(a3 > b3) b3 = a3						#saturation
 	a3 = -a3
 	if(a3 < b3) b3 = a3	

	ymem[i3] = b3

	ret
 
 	.endif